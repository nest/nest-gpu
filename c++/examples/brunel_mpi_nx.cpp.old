/*
Copyright (C) 2016 Bruno Golosio
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <stdio.h>
#include <iostream>
#include <string>
#include <algorithm>
#include "nestgpu.h"

using namespace std;

int main(int argc, char *argv[])
{
  NESTGPU neural_gpu;
  neural_gpu.ConnectMpiInit(argc, argv);
  int mpi_np = neural_gpu.MpiNp();
  if (mpi_np < 2) {
    cerr << "Usage: mpirun -np <number-of-mpi-hosts> brunel_mpi_nx\n";
    return -1;
  }

  int mpi_id = neural_gpu.MpiId();
  cout << "Building on host " << mpi_id << " ..." <<endl;

  neural_gpu.max_spike_buffer_num_=10; //reduce it to save GPU memory

  //////////////////////////////////////////////////////////////////////
  // WRITE HERE COMMANDS THAT ARE EXECUTED ON ALL HOSTS
  //////////////////////////////////////////////////////////////////////
  int n_receptors = 2;

  float delay = 1.0;       // synaptic delay in ms

  int order = 10000;
  int NE = 4 * order;      // number of excitatory neurons
  int NI = 1 * order;      // number of inhibitory neurons
  int n_neurons = NE + NI; // number of neurons in total

  int CE = 800;  // number of excitatory synapses per neuron
  int CI = CE/4;  // number of inhibitory synapses per neuron

  float Wex = 0.04995;
  float Win = 0.35;

  int Next = 10000; // number of external neurons (i.e. neurons stored in other
                    // hosts) connected to the current host
  int NEext = Next*4/5; // number of excitatory external neurons
  int NIext = Next/5;   // number of inhibitory external neurons

  // each host has n_neurons neurons with n_receptor receptor ports
  int neuron = neural_gpu.CreateNeuron(n_neurons, n_receptors);
  int exc_neuron = neuron;      // excitatory neuron id
  int inh_neuron = neuron + NE; // inhibitory neuron id

  // the following parameters are set to the same values on all hosts
  float E_rev[] = {0.0, -85.0};
  float tau_decay[] = {1.0, 1.0};
  float tau_rise[] = {1.0, 1.0};
  neural_gpu.SetNeuronVectParams("E_rev", neuron, n_neurons, E_rev, 2);
  neural_gpu.SetNeuronVectParams("tau_decay", neuron, n_neurons,
				 tau_decay, 2);
  neural_gpu.SetNeuronVectParams("tau_rise", neuron, n_neurons, tau_rise, 2);

  // each host has a poisson generator
  float poiss_rate = 20000.0; // poisson signal rate in Hz
  float poiss_weight = 0.369;
  float poiss_delay = 0.2; // poisson signal delay in ms
  int n_pg = 1; // number of poisson generators
  // create poisson generator
  int pg = neural_gpu.CreatePoissonGenerator(n_pg, poiss_rate);

  // Excitatory local connections, defined on all hosts
  // connect excitatory neurons to port 0 of all neurons
  // weight Wex and fixed indegree CE*3/4
  neural_gpu.ConnectFixedIndegree(exc_neuron, NE, neuron, n_neurons,
				  0, Wex, delay, CE/2);

  // Inhibitory local connections, defined on all hosts
  // connect inhibitory neurons to port 1 of all neurons
  // weight Win and fixed indegree CI*3/4
  neural_gpu.ConnectFixedIndegree(inh_neuron, NI, neuron, n_neurons,
				  1, Win, delay, CI/2);

  // connect poisson generator to port 0 of all neurons
  neural_gpu.ConnectAllToAll(pg, n_pg, neuron, n_neurons, 0, poiss_weight,
			     poiss_delay);

  char filename[100];
  sprintf(filename, "test_brunel_mpi_nx_%d.dat", mpi_id);
  int i_neurons[] = {2000, 8000, 9999}; // any set of neuron indexes
  // create multimeter record of V_m
  neural_gpu.CreateRecord(string(filename), "V_m", i_neurons, 3);

  //////////////////////////////////////////////////////////////////////
  // WRITE HERE REMOTE CONNECTIONS
  //////////////////////////////////////////////////////////////////////

  for (int ith=0; ith<mpi_np; ith++) { // loop on target hosts
    // Excitatory remote connections
    // connect excitatory neurons to port 0 of all neurons
    // weight Wex and fixed indegree CE-CE*3/4
    int ish1 = (ith > 0) ? ith-1 : mpi_np - 1; // previous host on a ring
    int ish2 = (ith < mpi_np -1) ? ith+1 : 0; // next host on a ring
    // previous host to target host
    neural_gpu.RemoteConnectFixedIndegree(ish1, exc_neuron+NE-NEext/2,
					  NEext/2, ith, neuron, n_neurons,
					  0, Wex, delay, CE/4);
    // next host to target host
    neural_gpu.RemoteConnectFixedIndegree(ish2, exc_neuron+NE-NEext/2,
					  NEext/2, ith, neuron, n_neurons,
					  0, Wex, delay, CE/4);


    // Inhibitory remote connections
    // connect inhibitory neurons to port 1 of all neurons
    // weight Win and fixed indegree CI-CI*3/4
    // previous host to target host
    neural_gpu.RemoteConnectFixedIndegree(ish1, inh_neuron+NI-NIext/2,
					  NIext/2, ith, neuron, n_neurons,
					  1, Win, delay, CI/4);
    // next host to target host
    neural_gpu.RemoteConnectFixedIndegree(ish2, inh_neuron+NI-NIext/2,
					  NIext/2, ith, neuron, n_neurons,
					  1, Win, delay, CI/4);

  }

  neural_gpu.SetRandomSeed(1234ULL); // just to have same results in different simulations
  neural_gpu.Simulate();

  neural_gpu.MpiFinalize();

  return 0;
}
