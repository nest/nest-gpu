int **d_ConnectionGroupTargetNode; // [NSpikeBuffer*MaxDelayNum];

unsigned char **d_ConnectionGroupTargetSynGroup; // [NSpikeBuffer*MaxDelayNum];

int **d_ConnectionGroupTargetNode; // [NSpikeBuffer*MaxDelayNum];


d_conn_weight -> ConnectionWeight
d_conn_syn_group -> ConnectionSynGroup



if (ConnectionSpikeTimeFlag){
d_ConnectionSpikeTime = CudaMalloc(...)

std::vector<std::vector<int>> rev_connections;

for (int i_node=0; i_node<n_nodes; i_node++) {
  .....
  if(RevConnectionFlag) {
    std::vector<int> rev_conn_vect;
    rev_connections->push_back(rev_conn_vect);
  }
}

for (int i_node=0, i_node<n_node, i_node++) {
  ....
  for (int i_group=0; i_group<n_group; i_group++) {
    for (int i_conn=0; ....
       ...
       conn_idx= ....;


oppure il loop si puÃ² fare direttamente su conn_idx (i_conn)




NRevConnection

RevConnectionSize[i] i=0,..., n_neuron-1;

RevConnection[i][j] j=0,...,RevConnectionSize[i]-1


for (unsigned int target=0; target<n_spike_buffers; target++) {
  if (target.isSpikingNow()) {
    int n_target_rev_conn = TargetRevConnectionSize[target];
    for (int i=0; i<n_target_rev_conn; i++) {
      unsigned int i_conn = TargetRevConnection[target][i];
      unsigned char syn_group = ConnectionSynGroup[i_conn];
      if (syn_group==1) {
        weight = ConnectionWeight[i_conn];
        spike_time_idx = ConnectionSpikeTime[i_conn];
        Dt = ((int)time_idx - spike_time_idx)&0xffff;
        STDP(Dt, &weight);
      }
    }
  }
}

for (unsigned int target=0; target<n_spike_buffers; target++) {
  if (target.isSpikingNow()) {
    int n_target_rev_conn = TargetRevConnectionSize[target];

    for (int i=0; i<n_target_rev_conn; i++) {
      unsigned int i_conn = TargetRevConnection[target][i];
      unsigned char syn_group = ConnectionSynGroup[i_conn];
      if (syn_group==1) {
        weight = ConnectionWeight[i_conn];
        spike_time_idx = ConnectionSpikeTime[i_conn];
        Dt = ((int)time_idx - spike_time_idx)&0xffff;
        STDP(Dt, &weight);
      }
    }
  }
}
